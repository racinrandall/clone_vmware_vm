---
- name: Add additional Disks
  block:
  - name: Lookup the VM we are working with
    vmware.vmware_rest.vcenter_vm_info:
      vcenter_hostname: "{{ vcenter_hostname }}"
      vcenter_username: "{{ vcenter_username }}"
      vcenter_password: "{{ vcenter_password }}"
      vcenter_validate_certs: false
      filter_names:
        - "{{ ansible_hostname }}"
    register: vm_search
    delegate_to: localhost

  - name: Lookup the VM we are working with
    vmware.vmware_rest.vcenter_vm_info:
      vcenter_hostname: "{{ vcenter_hostname }}"
      vcenter_username: "{{ vcenter_username }}"
      vcenter_password: "{{ vcenter_password }}"
      vcenter_validate_certs: false
      vm: "{{ vm_search.value[0].vm }}"
    register: search_results
    delegate_to: localhost

  - name: Add additional disk
    vmware.vmware_rest.vcenter_vm_hardware_disk:
      vcenter_hostname: "{{ vcenter_hostname }}"
      vcenter_username: "{{ vcenter_username }}"
      vcenter_password: "{{ vcenter_password }}"
      vcenter_validate_certs: false
      vm: "{{ vm_search.value[0].vm }}"
      type: SCSI
      new_vmdk:
        capacity: "{{ item.size | human_to_bytes }}" 
    register: new_disk
    delegate_to: localhost
    loop: "{{ additional_disks }}"

  - name: Create PV and VG
    community.general.lvg:
      vg: "vg_{{ item.vol_group }}"
      pvs: "{{ item.physical_drive }}"
    loop: "{{ additional_disks }}"

  - name: Create Logical Volumes
    community.general.lvol: 
      lv: "lv{{ item.mount_point | replace('/','_')}}"
      vg: "vg_{{ item.vol_group }}"
      size: "{{ item.size }}"
    loop: "{{ additional_mounts }}"

  - name: Format new Logical Volumes
    filesystem:
      fstype: "{{ fs_type }}"
      dev: "/dev/mapper/vg_{{ item.vol_group }}-lv{{ item.mount_point | replace('/','_')}}"
    loop: "{{ additional_mounts }}"

  - name: Mount Logical Volumes
    mount:
      src: "/dev/mapper/vg_{{ item.vol_group }}-lv{{ item.mount_point | replace('/','_')}}"
      path: "{{ item.mount_point }}"
      state: mounted
      fstype: "{{ fs_type }}"
    loop: "{{ additional_mounts }}"
  when: additional_disks is defined